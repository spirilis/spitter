# Default values for spitter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  registry: "docker.io"
  repository: spirilis/spitter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  args: {}  # optional - if not set, the args run the entrypoint with "router" and CLI arguments reflecting values in the .spitter section below.


# Spitter can auto-generate its configuration file configmap, but supplying additionalRouters means you must supply that configmap ahead of time
spitter:
  port: 9820  # This is assumed; it is the default port if no port is given in the config.yml in your spitter-config configmap.
              # If this listener port differs in your own config file, override this when installing the helm chart.
  router:
    config:
      autogenerate: true
      configMap: spitter-helm-config
      key: config.yml
    routers: {} # optional - static set of router configs - only relevant if .spitter.router.config.autogenerate is true
    additionalRouters:
      configMap: {}  # this is the name of a configmap, all its keys are assumed to be router configs
      mountPath: /spitter
  reloadSignal:
    path: /var/run/spitter-reload
    file: reload.txt
  alertmanagerURL: {}
  prometheusURL: {}

extraContainers: {}
#  - name: gateway
#    <other container spec yaml here>

initContainers: {}
#  - name: perm-fix
#    <other container spec yaml here>

extraVolumes: {}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  # targetPort: 80  # optional - if empty, .spitter.port is used instead
  nodePort:
    enabled: false
    number: 0  # optionally specify nodePort - 30000-32767
    externalTrafficPolicy: Cluster
  annotations: {}
  additionalPorts: {}
  # if you have sidecar containers exposing ports-
  # - port: 3200
  #   name: metrics  # optional, uses autogenerated names like addl1, addl2, addl3 etc. if blank
  #   targetPort: 3200 # optional
  #   nodePort: 0  # optional - can set static node port# if .service.nodePort.enabled is true
  #   protocol: TCP # optional - defaults to TCP
  #   appProtocol: "" # optional - define the protocol spec for this port
  customServiceSpec: {} # optional - any other directives you want to put into the Service .spec, such as loadBalancerSourceRanges, ipFamilies, etc.
                        # Do not override type:, ports:, selector: or externalTrafficPolicy: here

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          # backend: {}
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Prometheus support creates a PodMonitor object for a prometheus-operator installation.
prometheus:
  enabled: false
  annotations: {}
  endpoints:
    - port: http
      path: /metrics
      interval: 60s
  # NOTE: Port must be a string name matching the given name for the prometheus port in your container or sidecar, listed above.
  # Other fields available at: https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#podmetricsendpoint
  # (the contents of endpoints: is copied wholesale into the podMetricsEndpoints field of a PodMonitor object)

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
  # custom: {}  # optional - specify a custom spec: for the HPA, MINUS the scaleTargetRef: which is auto-filled by this helm chart

nodeSelector: {}

tolerations: []

affinity: {}
